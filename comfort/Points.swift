//
//  Points.swift
//  comfort
//
//  Created by Пичугин Дмитрий Сергеевич on 14.06.2018.
//  Copyright © 2018 Алиев Дмитрий. All rights reserved.
//

import Foundation

struct AccessPoints {
    static var valuesDict: [String: (Int, Int)] =
        [
            "84:3d:c6:b5:6a:12": (56,80),
            "2c:33:11:7:50:2": (35,65),
            "0:a6:ca:68:a3:fd": (52,16),
            "0:a6:ca:68:9d:ad": (76,23),
            "0:a6:ca:5f:42:4d": (88,52),
            "0:a6:ca:5f:42:42": (91,62),
            "0:a6:ca:56:e:d": (10,84),
            "0:a6:ca:56:e:a2": (6,32),
            "0:a6:ca:56:e:4d": (54,23),
            "0:a6:ca:56:e:42": (56,24),
            "0:a6:ca:56:d:c2": (30,4),
            "0:a6:ca:56:d:82": (8,65),
            "0:a6:ca:56:c:f2": (67,89),
            "0:a6:ca:56:c:ed": (80,8),
            "0:a6:ca:56:c:e2": (78,14),
            "0:a6:ca:56:c:92": (97,17),
            "0:a6:ca:56:7:ad": (43,82),
            "0:a6:ca:56:7:a2": (44,77),
            "0:a6:ca:56:42:7d": (35,17),
            "0:a6:ca:56:42:72": (37,9),
            "0:a6:ca:56:42:6d": (9,67),
            "0:a6:ca:56:42:62": (7,92),
            "0:a6:ca:56:42:2d": (69,91),
            "0:a6:ca:56:11:ad": (77,81),
            "0:a6:ca:56:10:ed": (59,88),
            "0:a6:ca:48:4:82": (41,8),
            "0:a6:ca:48:3:d2": (23,25),
            "0:a6:ca:48:2:ed": (35,85),
            "0:a6:ca:47:fe:cd": (14,49),
            "0:a6:ca:47:fe:c2": (12,45),
            "0:a6:ca:47:fa:cd": (93,64),
            "0:a6:ca:47:c4:cd": (87,8),
            "0:a6:ca:47:c4:c2": (90,12),
            "0:a6:ca:47:c3:e2": (49,35),
            "0:a6:ca:35:a1:62": (85,47),
            "0:a6:ca:35:93:fd": (95,26),
            "0:a6:ca:35:66:7d": (61,63),
            "0:a6:ca:35:60:bd": (34,76),
            "0:a6:ca:35:60:b2": (32,89),
            "0:a6:ca:34:d3:72": (21,23),
            "0:a6:ca:34:d1:2d": (13,13),
            "0:a6:ca:34:d1:22": (12,9),
            "0:a6:ca:34:ca:dd": (95,68),
            "0:a6:ca:34:c8:ed": (89,38),
            "0:a6:ca:34:c8:e2": (98,41),
            "0:a6:ca:34:c6:5d": (28,76),
            "0:a6:ca:34:c6:52": (36,73),
            "0:a6:ca:34:93:2d": (40,58),
            "0:a6:ca:34:92:e2": (57,67),
            "0:a6:ca:34:8a:6d": (22,79),
            "0:a6:ca:34:8a:62": (14,91),
            "0:a6:ca:34:8a:2d": (59,39),
            "0:a6:ca:34:8a:22": (57,7),
            "0:a6:ca:2d:7d:8d": (51,87),
            "0:a6:ca:2d:7d:2": (48,58),
            "0:a6:ca:2d:7b:82": (23,90),
            "0:a6:ca:18:4a:d": (6,33),
            "0:a6:ca:18:48:ed": (45,37),
            "0:a6:ca:18:48:b2": (13,20),
            "0:a6:ca:10:b1:82": (8,18),
            "0:a6:ca:10:8d:9d": (87,90),
            "0:a6:ca:10:8d:92": (89,71),
            "0:a6:ca:10:8d:42": (70,20),
            "0:a6:ca:10:8b:3d": (39,37),
            "0:a6:ca:10:8b:32": (33,26),
            "0:a6:ca:10:8a:fd": (5,73),
            "0:a6:ca:10:8a:4d": (60,6),
            "0:a6:ca:10:8a:42": (52,29)
    ]
}

let netString = """

1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111s11111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111000000000111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111000000000111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100001111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111111101111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100001111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111011111100111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111100000000000000000000000001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111110001111111111111111111111111111111111111111111111111111111111111111111
11111111111111111111111111111100f1111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
1111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111
"""

extension String {
    subscript (i: Int) -> Character {
        return self[index(startIndex, offsetBy: i)]
    }
    subscript (bounds: CountableRange<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[start ..< end]
    }
    subscript (bounds: CountableClosedRange<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[start ... end]
    }
    subscript (bounds: CountablePartialRangeFrom<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(endIndex, offsetBy: -1)
        return self[start ... end]
    }
    subscript (bounds: PartialRangeThrough<Int>) -> Substring {
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[startIndex ... end]
    }
    subscript (bounds: PartialRangeUpTo<Int>) -> Substring {
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[startIndex ..< end]
    }
}
extension Substring {
    subscript (i: Int) -> Character {
        return self[index(startIndex, offsetBy: i)]
    }
    subscript (bounds: CountableRange<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[start ..< end]
    }
    subscript (bounds: CountableClosedRange<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[start ... end]
    }
    subscript (bounds: CountablePartialRangeFrom<Int>) -> Substring {
        let start = index(startIndex, offsetBy: bounds.lowerBound)
        let end = index(endIndex, offsetBy: -1)
        return self[start ... end]
    }
    subscript (bounds: PartialRangeThrough<Int>) -> Substring {
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[startIndex ... end]
    }
    subscript (bounds: PartialRangeUpTo<Int>) -> Substring {
        let end = index(startIndex, offsetBy: bounds.upperBound)
        return self[startIndex ..< end]
    }
}
